import os
import asyncio
import aiohttp
import aiofiles
import telebot
import re

async def generate_image(prompt, style="", amount=1):
    image_paths = []

    for i in range(min(amount, 4)):  # Max 4 images
        # Ensure prompt and style are properly URL-encoded
        encoded_prompt = aiohttp.helpers.quote(prompt)
        encoded_style = aiohttp.helpers.quote(style)
        url = f"https://imggen-delta.vercel.app/?prompt={encoded_prompt}&style={encoded_style}"

        async with aiohttp.ClientSession() as session:
            async with session.get(url) as res:
                res.raise_for_status() # Raise an exception for bad status codes
                data = await res.json()
                image_url = data.get("url")

                if not image_url:
                    break

                async with session.get(image_url) as img_res:
                    img_res.raise_for_status() # Raise an exception for bad status codes
                    img_bytes = await img_res.read()

                img_path = f"gart_result_{i+1}.png"
                async with aiofiles.open(img_path, mode='wb') as f:
                    await f.write(img_bytes)

                image_paths.append(img_path)

    return image_paths

# register function now accepts command_prefixes_list
def register(bot, custom_command_handler, command_prefixes_list): # <-- MODIFIED LINE (added command_prefixes_list)
    @custom_command_handler("gart")
    def gart_command(message):
        # Get the full command text and calculate actual command length
        command_text = message.text.split(" ", 1)[0].lower()
        actual_command_len = 0
        # Use command_prefixes_list here
        for prefix in command_prefixes_list: # <-- MODIFIED LINE (using command_prefixes_list)
            if command_text.startswith(f"{prefix}gart"):
                actual_command_len = len(f"{prefix}gart")
                break

        arg_string = message.text[actual_command_len:].strip() # ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶Ö‡¶Ç‡¶∂ ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü

        if not arg_string:
            # Update example message with dynamic prefixes
            bot.reply_to(message, f"‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü ‡¶¶‡¶ø‡¶®‡•§ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ: `{command_prefixes_list[0]}gart a cat .stl anime .cnt 2`", parse_mode="Markdown") # <-- MODIFIED LINE (updated example)
            return

        # Regular expression to extract prompt, style, and amount
        # It handles cases where .stl or .cnt might be missing
        match = re.match(r"^(.*?)(?:\s*\.stl\s*(.*?))?(?:\s*\.cnt\s*(\d+))?$", arg_string, re.IGNORECASE | re.DOTALL)

        prompt = match.group(1).strip() if match and match.group(1) else ""
        style = match.group(2).strip() if match and match.group(2) else ""
        amount = int(match.group(3)) if match and match.group(3) else 1

        if not prompt:
            bot.reply_to(message, "‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü ‡¶¶‡¶ø‡¶®‡•§", parse_mode="Markdown")
            return

        if amount > 4:
            amount = 4
            bot.reply_to(message, "‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡ß™‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§ ‡ß™‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")

        generating_msg = bot.reply_to(message, "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶õ‡¶¨‡¶ø/‡¶õ‡¶¨‡¶ø‡¶ó‡ßÅ‡¶≤‡ßã ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...")

        try:
            image_paths = asyncio.run(generate_image(prompt, style, amount))

            if not image_paths:
                bot.edit_message_text(
                    "‡¶õ‡¶¨‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
                    chat_id=generating_msg.chat.id,
                    message_id=generating_msg.message_id
                )
                return

            # Send images one by one
            for path in image_paths:
                with open(path, 'rb') as f:
                    bot.send_photo(message.chat.id, f)

            # Edit the generating message with final result
            result_text = (
                f"üîç‡¶á‡¶Æ‡ßá‡¶ú ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶üüîç\n\nüìù‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü: {prompt}\n" +
                (f"üé®‡¶∏‡ßç‡¶ü‡¶æ‡¶á‡¶≤: {style}\n" if style else "") +
                f"#Ô∏è‚É£‡¶õ‡¶¨‡¶ø‡¶∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ: {len(image_paths)}"
            )
            bot.edit_message_text(
                result_text,
                chat_id=generating_msg.chat.id,
                message_id=generating_msg.message_id
            )

        except Exception as e:
            bot.reply_to(message, f"‚ùå ‡¶õ‡¶¨‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {str(e)}")
        finally:
            # Clean up generated files
            for path in image_paths:
                if os.path.exists(path):
                    os.remove(path)